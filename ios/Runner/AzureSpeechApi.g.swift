// Autogenerated from Pigeon (v19.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct PronunciationAssessmentResult {
  var accuracyScore: Double? = nil
  var pronunciationScore: Double? = nil
  var completenessScore: Double? = nil
  var fluencyScore: Double? = nil
  var words: [WordAssessmentResult?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PronunciationAssessmentResult? {
    let accuracyScore: Double? = nilOrValue(__pigeon_list[0])
    let pronunciationScore: Double? = nilOrValue(__pigeon_list[1])
    let completenessScore: Double? = nilOrValue(__pigeon_list[2])
    let fluencyScore: Double? = nilOrValue(__pigeon_list[3])
    let words: [WordAssessmentResult?]? = nilOrValue(__pigeon_list[4])

    return PronunciationAssessmentResult(
      accuracyScore: accuracyScore,
      pronunciationScore: pronunciationScore,
      completenessScore: completenessScore,
      fluencyScore: fluencyScore,
      words: words
    )
  }
  func toList() -> [Any?] {
    return [
      accuracyScore,
      pronunciationScore,
      completenessScore,
      fluencyScore,
      words,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct WordAssessmentResult {
  var word: String? = nil
  var accuracyScore: Double? = nil
  var errorType: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> WordAssessmentResult? {
    let word: String? = nilOrValue(__pigeon_list[0])
    let accuracyScore: Double? = nilOrValue(__pigeon_list[1])
    let errorType: String? = nilOrValue(__pigeon_list[2])

    return WordAssessmentResult(
      word: word,
      accuracyScore: accuracyScore,
      errorType: errorType
    )
  }
  func toList() -> [Any?] {
    return [
      word,
      accuracyScore,
      errorType,
    ]
  }
}

private class AzureSpeechApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return PronunciationAssessmentResult.fromList(self.readValue() as! [Any?])
    case 129:
      return WordAssessmentResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class AzureSpeechApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PronunciationAssessmentResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? WordAssessmentResult {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class AzureSpeechApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return AzureSpeechApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return AzureSpeechApiCodecWriter(data: data)
  }
}

class AzureSpeechApiCodec: FlutterStandardMessageCodec {
  static let shared = AzureSpeechApiCodec(readerWriter: AzureSpeechApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AzureSpeechApi {
  /// Initialise le SDK Azure Speech avec les clés fournies.
  func initialize(subscriptionKey: String, region: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Démarre l'évaluation de la prononciation pour le texte de référence donné.
  /// Retourne le résultat de l'évaluation ou null si aucun discours n'est reconnu.
  /// Lance une exception en cas d'erreur de configuration ou de reconnaissance.
  func startPronunciationAssessment(referenceText: String, language: String, completion: @escaping (Result<PronunciationAssessmentResult?, Error>) -> Void)
  /// Arrête toute reconnaissance vocale en cours.
  func stopRecognition(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AzureSpeechApiSetup {
  /// The codec used by AzureSpeechApi.
  static var codec: FlutterStandardMessageCodec { AzureSpeechApiCodec.shared }
  /// Sets up an instance of `AzureSpeechApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AzureSpeechApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Initialise le SDK Azure Speech avec les clés fournies.
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eloquence_flutter.AzureSpeechApi.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let subscriptionKeyArg = args[0] as! String
        let regionArg = args[1] as! String
        api.initialize(subscriptionKey: subscriptionKeyArg, region: regionArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    /// Démarre l'évaluation de la prononciation pour le texte de référence donné.
    /// Retourne le résultat de l'évaluation ou null si aucun discours n'est reconnu.
    /// Lance une exception en cas d'erreur de configuration ou de reconnaissance.
    let startPronunciationAssessmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eloquence_flutter.AzureSpeechApi.startPronunciationAssessment\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startPronunciationAssessmentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let referenceTextArg = args[0] as! String
        let languageArg = args[1] as! String
        api.startPronunciationAssessment(referenceText: referenceTextArg, language: languageArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startPronunciationAssessmentChannel.setMessageHandler(nil)
    }
    /// Arrête toute reconnaissance vocale en cours.
    let stopRecognitionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eloquence_flutter.AzureSpeechApi.stopRecognition\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRecognitionChannel.setMessageHandler { _, reply in
        api.stopRecognition { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopRecognitionChannel.setMessageHandler(nil)
    }
  }
}

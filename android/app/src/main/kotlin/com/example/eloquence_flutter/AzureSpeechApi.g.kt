// Autogenerated from Pigeon (v19.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.example.eloquence_flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class PronunciationAssessmentResult (
  val accuracyScore: Double? = null,
  val pronunciationScore: Double? = null,
  val completenessScore: Double? = null,
  val fluencyScore: Double? = null,
  val words: List<WordAssessmentResult?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PronunciationAssessmentResult {
      val accuracyScore = __pigeon_list[0] as Double?
      val pronunciationScore = __pigeon_list[1] as Double?
      val completenessScore = __pigeon_list[2] as Double?
      val fluencyScore = __pigeon_list[3] as Double?
      val words = __pigeon_list[4] as List<WordAssessmentResult?>?
      return PronunciationAssessmentResult(accuracyScore, pronunciationScore, completenessScore, fluencyScore, words)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      accuracyScore,
      pronunciationScore,
      completenessScore,
      fluencyScore,
      words,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class WordAssessmentResult (
  val word: String? = null,
  val accuracyScore: Double? = null,
  val errorType: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): WordAssessmentResult {
      val word = __pigeon_list[0] as String?
      val accuracyScore = __pigeon_list[1] as Double?
      val errorType = __pigeon_list[2] as String?
      return WordAssessmentResult(word, accuracyScore, errorType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      word,
      accuracyScore,
      errorType,
    )
  }
}

private object AzureSpeechApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PronunciationAssessmentResult.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WordAssessmentResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PronunciationAssessmentResult -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is WordAssessmentResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AzureSpeechApi {
  /** Initialise le SDK Azure Speech avec les clés fournies. */
  fun initialize(subscriptionKey: String, region: String, callback: (Result<Unit>) -> Unit)
  /**
   * Démarre l'évaluation de la prononciation pour le texte de référence donné.
   * Retourne le résultat de l'évaluation ou null si aucun discours n'est reconnu.
   * Lance une exception en cas d'erreur de configuration ou de reconnaissance.
   */
  fun startPronunciationAssessment(referenceText: String, language: String, callback: (Result<PronunciationAssessmentResult?>) -> Unit)
  /** Arrête toute reconnaissance vocale en cours. */
  fun stopRecognition(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by AzureSpeechApi. */
    val codec: MessageCodec<Any?> by lazy {
      AzureSpeechApiCodec
    }
    /** Sets up an instance of `AzureSpeechApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: AzureSpeechApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.eloquence_flutter.AzureSpeechApi.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val subscriptionKeyArg = args[0] as String
            val regionArg = args[1] as String
            api.initialize(subscriptionKeyArg, regionArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.eloquence_flutter.AzureSpeechApi.startPronunciationAssessment$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val referenceTextArg = args[0] as String
            val languageArg = args[1] as String
            api.startPronunciationAssessment(referenceTextArg, languageArg) { result: Result<PronunciationAssessmentResult?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.eloquence_flutter.AzureSpeechApi.stopRecognition$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopRecognition() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

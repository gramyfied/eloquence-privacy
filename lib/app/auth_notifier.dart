import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Un ChangeNotifier qui Ã©coute les changements d'Ã©tat d'authentification Supabase.
/// UtilisÃ© par GoRouter pour dÃ©clencher les redirections.
class AuthNotifier extends ChangeNotifier {
  bool _isLoggedIn = false;

  AuthNotifier() {
    // VÃ©rifier l'Ã©tat initial
    _isLoggedIn = Supabase.instance.client.auth.currentUser != null;
    // Ã‰couter les changements futurs
    Supabase.instance.client.auth.onAuthStateChange.listen((data) {
      final AuthChangeEvent event = data.event;
      final Session? session = data.session;
      final bool wasLoggedIn = _isLoggedIn;

      // Mettre Ã  jour l'Ã©tat basÃ© sur l'Ã©vÃ©nement et la session
      switch (event) {
        case AuthChangeEvent.signedIn:
        case AuthChangeEvent.tokenRefreshed:
        case AuthChangeEvent.userUpdated:
          _isLoggedIn = true;
          break;
        case AuthChangeEvent.signedOut:
          _isLoggedIn = false;
          break;
        case AuthChangeEvent.initialSession:
          // Pour initialSession, faire confiance Ã  l'Ã©tat actuel de la session
          // Ne pas mettre Ã  false si la session est valide juste parce que l'Ã©vÃ©nement est initialSession
          _isLoggedIn = session != null;
          break;
        case AuthChangeEvent.passwordRecovery:
        case AuthChangeEvent.userDeleted:
        case AuthChangeEvent.mfaChallengeVerified:
          // Ces Ã©vÃ©nements ne changent pas nÃ©cessairement l'Ã©tat de connexion principal
          // On pourrait les ignorer ou les gÃ©rer spÃ©cifiquement si nÃ©cessaire
          break;
      }

      print("[AuthNotifier] Auth state changed: event=$event, session=${session != null}, isLoggedIn=$_isLoggedIn (was $wasLoggedIn)");

      // Notifier seulement si l'Ã©tat de connexion a rÃ©ellement changÃ©
      if (wasLoggedIn != _isLoggedIn) {
        notifyListeners(); // Notifier GoRouter du changement
      }
    },
    onError: (error) {
      // GÃ©rer les erreurs potentielles du stream d'authentification lui-mÃªme
      print("ðŸ”´ [AuthNotifier] Erreur dans le stream onAuthStateChange: $error");
      // DÃ©cider si l'Ã©tat doit Ãªtre mis Ã  false en cas d'erreur ?
      // Pour l'instant, on loggue juste l'erreur. Une erreur ici pourrait
      // indiquer un problÃ¨me plus profond avec la connexion Supabase.
      // Si l'Ã©tat prÃ©cÃ©dent Ã©tait connectÃ©, on pourrait envisager de le passer Ã  dÃ©connectÃ©.
      // if (_isLoggedIn) {
      //   _isLoggedIn = false;
      //   notifyListeners();
      // }
    });
  }

  bool get isLoggedIn => _isLoggedIn;
}

// Optionnel: CrÃ©er un provider Riverpod si on veut y accÃ©der ailleurs
// final authNotifierProvider = ChangeNotifierProvider((ref) => AuthNotifier());

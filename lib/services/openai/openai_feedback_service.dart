import 'dart:convert';
import 'package:http/http.dart' as http;
import '../../core/utils/console_logger.dart';

/// Service pour g√©n√©rer un feedback personnalis√© via Azure OpenAI
class OpenAIFeedbackService {
  final String apiKey;
  final String endpoint; // Endpoint Azure OpenAI
  final String deploymentName; // Nom du d√©ploiement Azure OpenAI
  final String apiVersion; // Version de l'API Azure OpenAI

  OpenAIFeedbackService({
    required this.apiKey,
    required this.endpoint,
    required this.deploymentName,
    this.apiVersion = '2023-07-01-preview', // Utiliser une version d'API appropri√©e
  });

  /// G√©n√®re un feedback personnalis√© bas√© sur les r√©sultats d'√©valuation
  Future<String> generateFeedback({
    required String exerciseType,
    required String exerciseLevel,
    required String spokenText,
    required String expectedText,
    required Map<String, dynamic> metrics,
  }) async {
    try {
      ConsoleLogger.info('ü§ñ [OPENAI] G√©n√©ration de feedback personnalis√© via OpenAI');
      ConsoleLogger.info('ü§ñ [OPENAI] - Type d\'exercice: $exerciseType');
      ConsoleLogger.info('ü§ñ [OPENAI] - Niveau: $exerciseLevel');
      ConsoleLogger.info('ü§ñ [OPENAI] - Texte prononc√©: "$spokenText"');
      ConsoleLogger.info('ü§ñ [OPENAI] - Texte attendu: "$expectedText"');

      // Construire le prompt pour OpenAI
      final prompt = _buildPrompt(
        exerciseType: exerciseType,
        exerciseLevel: exerciseLevel,
        spokenText: spokenText,
        expectedText: expectedText,
        metrics: metrics,
      );

      ConsoleLogger.info('Prompt OpenAI construit');

      // V√©rifier si les informations Azure OpenAI sont vides
      if (apiKey.isEmpty || endpoint.isEmpty || deploymentName.isEmpty) {
        ConsoleLogger.warning('ü§ñ [AZURE OPENAI] Informations Azure OpenAI manquantes (cl√©, endpoint ou d√©ploiement), utilisation du mode fallback');
        return _generateFallbackFeedback(
          exerciseType: exerciseType,
          metrics: metrics,
        );
      }

      // Appeler l'API Azure OpenAI
      try {
        ConsoleLogger.info('Appel de l\'API Azure OpenAI');
        // Construire l'URL Azure OpenAI
        final url = Uri.parse('$endpoint/openai/deployments/$deploymentName/chat/completions?api-version=$apiVersion');

        final response = await http.post(
          url,
          headers: {
            'Content-Type': 'application/json',
            'api-key': apiKey, // Utiliser 'api-key' pour Azure
          },
          body: jsonEncode({
            // 'model' n'est pas n√©cessaire pour Azure OpenAI via endpoint de d√©ploiement
            'messages': [
              {
                'role': 'system',
                'content': 'Tu es un coach vocal expert qui analyse les performances et fournit un feedback constructif',
              },
              {
                'role': 'user',
                'content': prompt,
              },
            ],
            'temperature': 0.7,
            'max_tokens': 500,
          }),
        );

        if (response.statusCode == 200) {
          ConsoleLogger.success('R√©ponse re√ßue de l\'API OpenAI');
          // D√©coder explicitement en UTF-8 √† partir des bytes pour √©viter les probl√®mes d'encodage
          final responseBody = utf8.decode(response.bodyBytes);
          final data = jsonDecode(responseBody);
          final feedback = data['choices'][0]['message']['content'];
          ConsoleLogger.info('Feedback g√©n√©r√©: "$feedback"');
          return feedback;
        } else {
          ConsoleLogger.error('Erreur de l\'API OpenAI: ${response.statusCode}, ${response.body}');
          throw Exception('Erreur de l\'API OpenAI: ${response.statusCode}');
        }
      } catch (e) {
        ConsoleLogger.error('Erreur lors de l\'appel √† l\'API OpenAI: $e');
        rethrow;
      }
    } catch (e) {
      ConsoleLogger.error('Erreur lors de la g√©n√©ration du feedback: $e');

      // En cas d'erreur, utiliser le mode fallback
      return _generateFallbackFeedback(
        exerciseType: exerciseType,
        metrics: metrics,
      );
    }
  }

  /// Construit le prompt pour OpenAI
  String _buildPrompt({
    required String exerciseType,
    required String exerciseLevel,
    required String spokenText,
    required String expectedText,
    required Map<String, dynamic> metrics,
  }) {
    final metricsString = metrics.entries
        .map((e) => '- ${e.key}: ${e.value is double ? e.value.toStringAsFixed(1) : e.value}')
        .join('\n');

    return '''
Contexte: Exercice de $exerciseType, niveau $exerciseLevel
Texte attendu: "$expectedText"
Texte prononc√©: "$spokenText"
M√©triques: 
$metricsString

G√©n√®re un feedback personnalis√©, constructif et encourageant pour cet exercice de $exerciseType.
Le feedback doit √™tre sp√©cifique aux points forts et aux points √† am√©liorer identifi√©s dans les m√©triques.
Inclus des conseils pratiques pour am√©liorer les aspects les plus faibles.
Limite ta r√©ponse √† 3-4 phrases maximum.
''';
  }

  /// G√©n√®re un feedback de secours bas√© sur le type d'exercice et les m√©triques
  String _generateFallbackFeedback({
    required String exerciseType,
    required Map<String, dynamic> metrics,
  }) {
    ConsoleLogger.warning('Utilisation du mode fallback pour la g√©n√©ration de feedback');

    // D√©terminer les points forts et les points faibles
    final List<String> strengths = [];
    final List<String> weaknesses = [];

    metrics.forEach((key, value) {
      if (key == 'pronunciationScore' || key == 'error' || key == 'texte_reconnu' || key == 'erreur_azure') { // Ignorer les cl√©s non num√©riques connues
        return;
      }

      // Essayer de convertir la valeur en double, ignorer si ce n'est pas un nombre
      double? score;
      if (value is num) {
          score = value.toDouble();
      } else if (value is String) {
          score = double.tryParse(value);
      }

      if (score != null) {
          if (score >= 85) {
              if (key == 'syllableClarity') {
                strengths.add('clart√© syllabique');
              } else if (key == 'consonantPrecision') {
                strengths.add('pr√©cision des consonnes');
              } else if (key == 'endingClarity') {
                strengths.add('nettet√© des finales');
              } else if (key.toLowerCase().contains('score')) {
                 strengths.add(key.replaceAll('_', ' '));
              }
          } else if (score < 75) {
              if (key == 'syllableClarity') {
                weaknesses.add('clart√© syllabique');
              } else if (key == 'consonantPrecision') {
                weaknesses.add('pr√©cision des consonnes');
              } else if (key == 'endingClarity') {
                weaknesses.add('nettet√© des finales');
              } else if (key.toLowerCase().contains('score')) {
                 weaknesses.add(key.replaceAll('_', ' '));
              }
          }
      } else {
         ConsoleLogger.info('Ignorer la m√©trique non num√©rique dans fallback: $key ($value)');
      }
    });

    // G√©n√©rer un feedback bas√© sur les points forts et les points faibles
    String feedback = '';

    if (exerciseType.toLowerCase().contains('articulation') || exerciseType.toLowerCase().contains('syllabique')) { // √âlargir la condition
      if (strengths.isNotEmpty) {
        feedback += 'Excellente performance ! Votre ${strengths.join(' et votre ')} ${strengths.length > 1 ? 'sont' : 'est'} particuli√®rement ${strengths.length > 1 ? 'bonnes' : 'bonne'}. ';
      } else {
        feedback += 'Bonne performance globale. ';
      }

      if (weaknesses.isNotEmpty) {
        feedback += 'Concentrez-vous sur votre ${weaknesses.join(' et votre ')}. Essayez d\'exag√©rer l√©g√®rement les mouvements pour plus de clart√©. ';
      }

      feedback += 'Continuez cette pratique r√©guli√®re !';
    } else {
      // Feedback g√©n√©rique si le type d'exercice n'est pas reconnu
      double? overallScore = metrics['score_global_accuracy'] is num ? (metrics['score_global_accuracy'] as num).toDouble() : null;
      if (overallScore != null && overallScore >= 70) {
         feedback = 'Excellent travail ! Votre prononciation est claire et pr√©cise. Continuez ainsi !';
      } else {
         feedback = 'Bon effort. Pratiquez r√©guli√®rement pour am√©liorer votre aisance et votre pr√©cision.';
      }
    }

    ConsoleLogger.info('Feedback fallback g√©n√©r√©: "$feedback"');
    return feedback;
  }

  /// G√©n√®re une phrase pour un exercice d'articulation
  Future<String> generateArticulationSentence({
    String? targetSounds, // Optionnel: pour cibler des sons sp√©cifiques
    int minWords = 8,
    int maxWords = 15,
    String language = 'fr-FR', // Langue cible
  }) async {
    ConsoleLogger.info('ü§ñ [OPENAI] G√©n√©ration de phrase d\'articulation...');
    if (targetSounds != null) {
      ConsoleLogger.info('ü§ñ [OPENAI] - Ciblage sons: $targetSounds');
    }
    ConsoleLogger.info('ü§ñ [OPENAI] - Longueur: $minWords-$maxWords mots');

    // Construire le prompt pour la g√©n√©ration de phrase
    String prompt = '''
G√©n√®re une seule phrase en fran√ßais ($language) pour un exercice d'articulation.
Objectif: Pratiquer une articulation claire et pr√©cise.
Contraintes:
- Longueur: entre $minWords et $maxWords mots.
- Doit √™tre grammaticalement correcte et naturelle pour un locuteur adulte.
''';
    if (targetSounds != null && targetSounds.isNotEmpty) {
      prompt += '- Mettre l\'accent sur les sons suivants: $targetSounds.\n';
    }
    prompt += '\nNe fournis que la phrase g√©n√©r√©e, sans aucune introduction, explication ou guillemets.';

    // V√©rifier si les informations Azure OpenAI sont vides
    if (apiKey.isEmpty || endpoint.isEmpty || deploymentName.isEmpty) {
      ConsoleLogger.warning('ü§ñ [AZURE OPENAI] Informations Azure OpenAI manquantes. Impossible de g√©n√©rer la phrase.');
      // Retourner une phrase par d√©faut en cas d'√©chec de configuration
      return "Le rapide renard brun saute par-dessus le chien paresseux.";
    }

    // Appeler l'API Azure OpenAI
    try {
      ConsoleLogger.info('Appel de l\'API Azure OpenAI pour g√©n√©ration de phrase');
      final url = Uri.parse('$endpoint/openai/deployments/$deploymentName/chat/completions?api-version=$apiVersion');

      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'api-key': apiKey,
        },
        body: jsonEncode({
          'messages': [
            {
              'role': 'system',
              'content': 'Tu es un g√©n√©rateur de contenu sp√©cialis√© dans la cr√©ation de phrases pour des exercices de diction et d\'articulation en fran√ßais.',
            },
            {
              'role': 'user',
              'content': prompt,
            },
          ],
          'temperature': 0.8, // Un peu plus de cr√©ativit√© pour les phrases
          'max_tokens': 100, // Suffisant pour une phrase
          'top_p': 0.95,
          'frequency_penalty': 0.2, // √âviter r√©p√©titions trop fr√©quentes
          'presence_penalty': 0.1,
        }),
      );

      if (response.statusCode == 200) {
        final responseBody = utf8.decode(response.bodyBytes);
        final data = jsonDecode(responseBody);
        String sentence = data['choices'][0]['message']['content'].trim();
        // Nettoyer la phrase (enlever guillemets potentiels)
        sentence = sentence.replaceAll(RegExp(r'^"|"$'), '');
        ConsoleLogger.success('ü§ñ [OPENAI] Phrase g√©n√©r√©e: "$sentence"');
        return sentence;
      } else {
        ConsoleLogger.error('ü§ñ [OPENAI] Erreur API lors de la g√©n√©ration de phrase: ${response.statusCode}, ${response.body}');
        throw Exception('Erreur API OpenAI: ${response.statusCode}');
      }
    } catch (e) {
      ConsoleLogger.error('ü§ñ [OPENAI] Erreur lors de la g√©n√©ration de phrase: $e');
      // Retourner une phrase par d√©faut en cas d'erreur
      return "Le soleil s√®che six chemises sur six cintres.";
    }
  }

  /// G√©n√®re un texte pour un exercice de rythme et pauses
  Future<String> generateRhythmExerciseText({
    required String exerciseLevel, // Niveau de difficult√© pour adapter le texte
    int minWords = 20,
    int maxWords = 40,
    String language = 'fr-FR',
  }) async {
    ConsoleLogger.info('ü§ñ [OPENAI] G√©n√©ration de texte pour Rythme et Pauses...');
    ConsoleLogger.info('ü§ñ [OPENAI] - Niveau: $exerciseLevel');
    ConsoleLogger.info('ü§ñ [OPENAI] - Longueur: $minWords-$maxWords mots');

    // Construire le prompt pour la g√©n√©ration de texte
    String prompt = '''
G√©n√®re un court texte en fran√ßais ($language) adapt√© pour un exercice de rythme et de pauses vocales, niveau $exerciseLevel.
Objectif: Pratiquer l'utilisation strat√©gique des silences pour am√©liorer l'impact et la clart√© du discours.
Contraintes:
- Longueur: entre $minWords et $maxWords mots.
- Doit √™tre grammaticalement correct et naturel pour un locuteur adulte.
- **Crucial: Ins√®re des marqueurs de pause "..." √† 3 ou 4 endroits strat√©giquement importants dans le texte o√π une pause am√©liorerait la compr√©hension ou l'emphase.** Les pauses doivent √™tre plac√©es logiquement, par exemple entre des id√©es ou avant/apr√®s des mots cl√©s.
- Le texte doit avoir un sens coh√©rent.

Ne fournis que le texte g√©n√©r√© avec les marqueurs "...", sans aucune introduction, explication ou guillemets.
Exemple de format attendu: "La communication efficace... repose sur l'√©coute active... et la clart√© d'expression... pour transmettre son message."
''';

    // V√©rifier si les informations Azure OpenAI sont vides
    if (apiKey.isEmpty || endpoint.isEmpty || deploymentName.isEmpty) {
      ConsoleLogger.warning('ü§ñ [AZURE OPENAI] Informations Azure OpenAI manquantes. Utilisation d\'un texte par d√©faut.');
      return "Le pouvoir d'une pause... bien plac√©e... ne peut √™tre sous-estim√©. Elle attire l'attention... et donne du poids... √† vos mots les plus importants.";
    }

    // Appeler l'API Azure OpenAI
    try {
      ConsoleLogger.info('Appel de l\'API Azure OpenAI pour g√©n√©ration de texte Rythme/Pauses');
      final url = Uri.parse('$endpoint/openai/deployments/$deploymentName/chat/completions?api-version=$apiVersion');

      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'api-key': apiKey,
        },
        body: jsonEncode({
          'messages': [
            {
              'role': 'system',
              'content': 'Tu es un g√©n√©rateur de contenu sp√©cialis√© dans la cr√©ation de textes pour des exercices de coaching vocal en fran√ßais, en particulier pour travailler le rythme et les pauses.',
            },
            {
              'role': 'user',
              'content': prompt,
            },
          ],
          'temperature': 0.7,
          'max_tokens': 150, // Un peu plus pour le texte
          'top_p': 1.0,
          'frequency_penalty': 0.1,
          'presence_penalty': 0.1,
        }),
      );

      if (response.statusCode == 200) {
        final responseBody = utf8.decode(response.bodyBytes);
        final data = jsonDecode(responseBody);
        String text = data['choices'][0]['message']['content'].trim();
        // Nettoyer le texte (enlever guillemets potentiels)
        text = text.replaceAll(RegExp(r'^"|"$'), '');
        // S'assurer qu'il y a bien des marqueurs '...' (sinon fallback)
        if (!text.contains('...')) {
           ConsoleLogger.warning('ü§ñ [OPENAI] Texte g√©n√©r√© ne contient pas de marqueurs "...". Utilisation du texte par d√©faut.');
           text = "Le pouvoir d'une pause... bien plac√©e... ne peut √™tre sous-estim√©. Elle attire l'attention... et donne du poids... √† vos mots les plus importants.";
        }
        ConsoleLogger.success('ü§ñ [OPENAI] Texte Rythme/Pauses g√©n√©r√©: "$text"');
        return text;
      } else {
        ConsoleLogger.error('ü§ñ [OPENAI] Erreur API lors de la g√©n√©ration de texte Rythme/Pauses: ${response.statusCode}, ${response.body}');
        throw Exception('Erreur API OpenAI: ${response.statusCode}');
      }
    } catch (e) {
      ConsoleLogger.error('ü§ñ [OPENAI] Erreur lors de la g√©n√©ration de texte Rythme/Pauses: $e');
      // Retourner un texte par d√©faut en cas d'erreur
      return "Le pouvoir d'une pause... bien plac√©e... ne peut √™tre sous-estim√©. Elle attire l'attention... et donne du poids... √† vos mots les plus importants.";
    }
  }

  /// G√©n√®re une liste de mots avec leur d√©composition syllabique pour l'exercice de pr√©cision syllabique.
  Future<List<Map<String, dynamic>>> generateSyllabicWords({
    required String exerciseLevel,
    int wordCount = 5, // Nombre de mots √† g√©n√©rer par d√©faut
    String language = 'fr-FR',
  }) async {
    ConsoleLogger.info('ü§ñ [OPENAI] G√©n√©ration de mots et syllabes...');
    ConsoleLogger.info('ü§ñ [OPENAI] - Niveau: $exerciseLevel');
    ConsoleLogger.info('ü§ñ [OPENAI] - Nombre de mots: $wordCount');

    // Construire le prompt
    String prompt = '''
G√©n√®re une liste de $wordCount mots en fran√ßais ($language) adapt√©s pour un exercice de pr√©cision syllabique de niveau "$exerciseLevel".
Pour chaque mot, fournis sa d√©composition syllabique pr√©cise, bas√©e sur la prononciation standard. Utilise un tiret (-) comme s√©parateur de syllabes.
Assure-toi que les mots choisis sont pertinents pour un contexte professionnel et que leur complexit√© correspond au niveau demand√© (ex: mots plus longs/complexes pour niveau Difficile).

Format de r√©ponse attendu (strictement JSON):
[
  {"word": "mot1", "syllables": ["syl1", "syl2"]},
  {"word": "mot2", "syllables": ["sylA", "sylB", "sylC"]},
  ...
]

Ne fournis que le JSON, sans aucune introduction, explication ou formatage suppl√©mentaire.
''';

    // V√©rifier la configuration Azure OpenAI
    if (apiKey.isEmpty || endpoint.isEmpty || deploymentName.isEmpty) {
      ConsoleLogger.warning('ü§ñ [AZURE OPENAI] Informations Azure OpenAI manquantes. Utilisation de mots par d√©faut.');
      // Retourner une liste par d√©faut en cas d'√©chec de configuration
      return [
        {"word": "collaboration", "syllables": ["col", "la", "bo", "ra", "tion"]},
        {"word": "strat√©gique", "syllables": ["stra", "t√©", "gique"]},
        {"word": "optimisation", "syllables": ["op", "ti", "mi", "sa", "tion"]},
        {"word": "communication", "syllables": ["co", "mu", "ni", "ca", "tion"]},
        {"word": "pr√©sentation", "syllables": ["pr√©", "sen", "ta", "tion"]},
      ];
    }

    // Appeler l'API Azure OpenAI
    try {
      ConsoleLogger.info('Appel de l\'API Azure OpenAI pour g√©n√©ration de mots syllabiques');
      final url = Uri.parse('$endpoint/openai/deployments/$deploymentName/chat/completions?api-version=$apiVersion');

      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'api-key': apiKey,
        },
        body: jsonEncode({
          'messages': [
            {
              'role': 'system',
              'content': 'Tu es un expert en phon√©tique et linguistique fran√ßaise, capable de g√©n√©rer des mots pertinents et de les d√©composer pr√©cis√©ment en syllabes. Tu r√©ponds uniquement en format JSON.',
            },
            {
              'role': 'user',
              'content': prompt,
            },
          ],
          'temperature': 0.6, // Moins de cr√©ativit√© pour la syllabification
          'max_tokens': 300, // Assez pour ~5 mots complexes et leurs syllabes
          'response_format': {'type': 'json_object'}, // Demander explicitement du JSON si l'API le supporte
        }),
      );

      if (response.statusCode == 200) {
        final responseBody = utf8.decode(response.bodyBytes);
        // Essayer de parser la r√©ponse JSON
        try {
          ConsoleLogger.info('ü§ñ [OPENAI] Tentative de d√©codage du corps de la r√©ponse...');
          final decodedBody = jsonDecode(responseBody);
          ConsoleLogger.info('ü§ñ [OPENAI] Corps de la r√©ponse d√©cod√© avec succ√®s.');

          // Extraire le contenu du message de l'assistant
          ConsoleLogger.info('ü§ñ [OPENAI] Tentative d\'extraction du contenu du message...');
          final String? content = decodedBody?['choices']?[0]?['message']?['content']?.toString();

          if (content == null || content.isEmpty) {
            ConsoleLogger.error('ü§ñ [OPENAI] Contenu du message vide ou manquant.');
            throw Exception('Contenu du message vide ou manquant dans la r√©ponse OpenAI.');
          }
          ConsoleLogger.info('ü§ñ [OPENAI] Contenu extrait: "$content"');

          // Le contenu lui-m√™me est la cha√Æne JSON d'un objet contenant la liste
          // Nettoyer les √©ventuels ```json ... ``` autour
          ConsoleLogger.info('ü§ñ [OPENAI] Nettoyage du contenu...');
          final cleanedContent = content.replaceAll(RegExp(r'^```json\s*|\s*```$'), '').trim();
          ConsoleLogger.info('ü§ñ [OPENAI] Contenu nettoy√©: "$cleanedContent"');

          ConsoleLogger.info('ü§ñ [OPENAI] Tentative de d√©codage du contenu nettoy√© comme Map...');
          final Map<String, dynamic> jsonObject = jsonDecode(cleanedContent); // D√©coder comme Map
          ConsoleLogger.info('ü§ñ [OPENAI] Contenu d√©cod√© comme Map avec succ√®s.');

          // Extraire la liste de la cl√© "words" (ou une cl√© similaire si le mod√®le varie)
          ConsoleLogger.info('ü§ñ [OPENAI] Tentative d\'extraction de la liste depuis la cl√© "words"...');
          final List<dynamic>? wordsList = jsonObject['words'] as List?; // Chercher la cl√© 'words'

          if (wordsList != null) {
             ConsoleLogger.info('ü§ñ [OPENAI] Liste "words" extraite avec succ√®s (${wordsList.length} √©l√©ments).');
                // Valider la structure de chaque √©l√©ment dans la liste extraite
                final List<Map<String, dynamic>> resultList = [];
                for (var item in wordsList) {
              if (item is Map && item.containsKey('word') && item.containsKey('syllables') && item['syllables'] is List) {
                 // Convertir les syllabes en List<String> par s√©curit√©
                 final List<String> syllables = List<String>.from(item['syllables'].map((s) => s.toString()));
                 if (syllables.isNotEmpty) { // S'assurer qu'il y a des syllabes
                    resultList.add({'word': item['word'].toString(), 'syllables': syllables});
                 } else {
                    ConsoleLogger.warning('Mot ignor√© car syllabes vides: ${item['word']}');
                 }
              } else {
                 ConsoleLogger.warning('Format d\'item JSON invalide ignor√©: $item');
              }
            }

            if (resultList.isNotEmpty) {
               ConsoleLogger.success('ü§ñ [OPENAI] Mots et syllabes g√©n√©r√©s et pars√©s avec succ√®s: ${resultList.length} mots.');
               return resultList;
            } else {
               ConsoleLogger.error('ü§ñ [OPENAI] La liste JSON g√©n√©r√©e est vide ou ne contient que des items invalides.');
               throw Exception('La liste JSON g√©n√©r√©e est vide ou ne contient que des items invalides.');
            }
              } else {
                 ConsoleLogger.error('ü§ñ [OPENAI] Cl√© "words" manquante ou n\'est pas une liste dans le JSON retourn√©.');
                throw Exception('Cl√© "words" manquante ou n\'est pas une liste dans le JSON retourn√©.');
              }
            } catch (e) { // Attraper sp√©cifiquement l'erreur de parsing du *contenu*
          ConsoleLogger.error('ü§ñ [OPENAI] Erreur parsing JSON de la r√©ponse: $e');
          ConsoleLogger.error('ü§ñ [OPENAI] R√©ponse brute: $responseBody');
          throw Exception('Erreur parsing JSON: $e');
        }
      } else {
        ConsoleLogger.error('ü§ñ [OPENAI] Erreur API lors de la g√©n√©ration de mots: ${response.statusCode}, ${response.body}');
        throw Exception('Erreur API OpenAI: ${response.statusCode}');
      }
    } catch (e) {
      ConsoleLogger.error('ü§ñ [OPENAI] Erreur lors de la g√©n√©ration de mots: $e');
      // Retourner une liste par d√©faut en cas d'erreur
      return [
        {"word": "collaboration", "syllables": ["col", "la", "bo", "ra", "tion"]},
        {"word": "strat√©gique", "syllables": ["stra", "t√©", "gique"]},
        {"word": "optimisation", "syllables": ["op", "ti", "mi", "sa", "tion"]},
      ];
    }
  }

}

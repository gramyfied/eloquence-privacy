// Mocks generated by Mockito 5.4.5 from annotations
// in eloquence_flutter/test/services/interactive_exercise/realtime_audio_pipeline_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:eloquence_flutter/services/audio/audio_service.dart' as _i2;
import 'package:eloquence_flutter/services/azure/azure_speech_service.dart'
    as _i3;
import 'package:eloquence_flutter/services/azure/azure_tts_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i1.Mock implements _i2.AudioService {
  MockAudioService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [AzureSpeechService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAzureSpeechService extends _i1.Mock
    implements _i3.AzureSpeechService {
  MockAzureSpeechService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<_i3.AzureSpeechEvent> get recognitionStream => (super.noSuchMethod(
        Invocation.getter(#recognitionStream),
        returnValue: _i4.Stream<_i3.AzureSpeechEvent>.empty(),
      ) as _i4.Stream<_i3.AzureSpeechEvent>);

  @override
  _i4.Future<void> startRecognition({
    String? referenceText,
    String? language = 'fr-FR',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startRecognition,
          [],
          {
            #referenceText: referenceText,
            #language: language,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startContinuousStreamingRecognition(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #startContinuousStreamingRecognition,
          [language],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopRecognition() => (super.noSuchMethod(
        Invocation.method(
          #stopRecognition,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AzureTtsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAzureTtsService extends _i1.Mock implements _i5.AzureTtsService {
  MockAzureTtsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get defaultVoice => (super.noSuchMethod(
        Invocation.getter(#defaultVoice),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#defaultVoice),
        ),
      ) as String);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<bool> get isPlayingStream => (super.noSuchMethod(
        Invocation.getter(#isPlayingStream),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  bool get isPlaying => (super.noSuchMethod(
        Invocation.getter(#isPlaying),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> initialize({
    required String? subscriptionKey,
    required String? region,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #subscriptionKey: subscriptionKey,
            #region: region,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> synthesizeAndPlay(
    String? text, {
    String? voiceName,
    String? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #synthesizeAndPlay,
          [text],
          {
            #voiceName: voiceName,
            #style: style,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

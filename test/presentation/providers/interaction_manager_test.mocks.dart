// Mocks generated by Mockito 5.4.5 from annotations
// in eloquence_flutter/test/presentation/providers/interaction_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:eloquence_flutter/domain/entities/interactive_exercise/conversation_turn.dart'
    as _i7;
import 'package:eloquence_flutter/domain/entities/interactive_exercise/scenario_context.dart'
    as _i2;
import 'package:eloquence_flutter/presentation/providers/interaction_manager.dart'
    as _i8;
import 'package:eloquence_flutter/services/azure/azure_speech_service.dart'
    as _i12;
import 'package:eloquence_flutter/services/interactive_exercise/conversational_agent_service.dart'
    as _i6;
import 'package:eloquence_flutter/services/interactive_exercise/feedback_analysis_service.dart'
    as _i11;
import 'package:eloquence_flutter/services/interactive_exercise/realtime_audio_pipeline.dart'
    as _i10;
import 'package:eloquence_flutter/services/interactive_exercise/scenario_generator_service.dart'
    as _i4;
import 'package:flutter/foundation.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScenarioContext_0 extends _i1.SmartFake
    implements _i2.ScenarioContext {
  _FakeScenarioContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueListenable_1<T> extends _i1.SmartFake
    implements _i3.ValueListenable<T> {
  _FakeValueListenable_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObject_2 extends _i1.SmartFake implements Object {
  _FakeObject_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScenarioGeneratorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockScenarioGeneratorService extends _i1.Mock
    implements _i4.ScenarioGeneratorService {
  MockScenarioGeneratorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ScenarioContext> generateScenario(String? exerciseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateScenario,
          [exerciseId],
        ),
        returnValue:
            _i5.Future<_i2.ScenarioContext>.value(_FakeScenarioContext_0(
          this,
          Invocation.method(
            #generateScenario,
            [exerciseId],
          ),
        )),
      ) as _i5.Future<_i2.ScenarioContext>);
}

/// A class which mocks [ConversationalAgentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationalAgentService extends _i1.Mock
    implements _i6.ConversationalAgentService {
  MockConversationalAgentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> getNextResponse({
    required _i2.ScenarioContext? context,
    required List<_i7.ConversationTurn>? history,
    _i8.UserVocalMetrics? lastUserMetrics,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextResponse,
          [],
          {
            #context: context,
            #history: history,
            #lastUserMetrics: lastUserMetrics,
          },
        ),
        returnValue: _i5.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #getNextResponse,
            [],
            {
              #context: context,
              #history: history,
              #lastUserMetrics: lastUserMetrics,
            },
          ),
        )),
      ) as _i5.Future<String>);
}

/// A class which mocks [RealTimeAudioPipeline].
///
/// See the documentation for Mockito's code generation for more information.
class MockRealTimeAudioPipeline extends _i1.Mock
    implements _i10.RealTimeAudioPipeline {
  MockRealTimeAudioPipeline() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<String> get userFinalTranscriptStream => (super.noSuchMethod(
        Invocation.getter(#userFinalTranscriptStream),
        returnValue: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);

  @override
  _i5.Stream<String> get userPartialTranscriptStream => (super.noSuchMethod(
        Invocation.getter(#userPartialTranscriptStream),
        returnValue: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);

  @override
  _i3.ValueListenable<bool> get isListening => (super.noSuchMethod(
        Invocation.getter(#isListening),
        returnValue: _FakeValueListenable_1<bool>(
          this,
          Invocation.getter(#isListening),
        ),
      ) as _i3.ValueListenable<bool>);

  @override
  _i3.ValueListenable<bool> get isSpeaking => (super.noSuchMethod(
        Invocation.getter(#isSpeaking),
        returnValue: _FakeValueListenable_1<bool>(
          this,
          Invocation.getter(#isSpeaking),
        ),
      ) as _i3.ValueListenable<bool>);

  @override
  _i5.Stream<String> get errorStream => (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);

  @override
  _i5.Future<void> start(String? language) => (super.noSuchMethod(
        Invocation.method(
          #start,
          [language],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> speakText(String? text) => (super.noSuchMethod(
        Invocation.method(
          #speakText,
          [text],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FeedbackAnalysisService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedbackAnalysisService extends _i1.Mock
    implements _i11.FeedbackAnalysisService {
  MockFeedbackAnalysisService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<Object> analyzePerformance({
    required _i2.ScenarioContext? context,
    required List<_i7.ConversationTurn>? conversationHistory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzePerformance,
          [],
          {
            #context: context,
            #conversationHistory: conversationHistory,
          },
        ),
        returnValue: _i5.Future<Object>.value(_FakeObject_2(
          this,
          Invocation.method(
            #analyzePerformance,
            [],
            {
              #context: context,
              #conversationHistory: conversationHistory,
            },
          ),
        )),
      ) as _i5.Future<Object>);
}

/// A class which mocks [AzureSpeechService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAzureSpeechService extends _i1.Mock
    implements _i12.AzureSpeechService {
  MockAzureSpeechService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i12.AzureSpeechEvent> get recognitionStream =>
      (super.noSuchMethod(
        Invocation.getter(#recognitionStream),
        returnValue: _i5.Stream<_i12.AzureSpeechEvent>.empty(),
      ) as _i5.Stream<_i12.AzureSpeechEvent>);

  @override
  _i5.Future<void> startRecognition({
    String? referenceText,
    String? language = 'fr-FR',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startRecognition,
          [],
          {
            #referenceText: referenceText,
            #language: language,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> startContinuousStreamingRecognition(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #startContinuousStreamingRecognition,
          [language],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> stopRecognition() => (super.noSuchMethod(
        Invocation.method(
          #stopRecognition,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

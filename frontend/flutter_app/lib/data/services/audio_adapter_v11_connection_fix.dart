import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';
import 'package:just_audio/just_audio.dart';
import 'package:path_provider/path_provider.dart';
import 'package:eloquence_2_0/core/utils/logger_service.dart';
import 'package:eloquence_2_0/src/services/livekit_service.dart';
import 'package:eloquence_2_0/data/models/session_model.dart';

/// AudioAdapter V11 - Correction du probl√®me de timing de connexion
/// 
/// Corrections appliqu√©es:
/// - Attente active de la connexion LiveKit avant d√©marrage enregistrement
/// - Retry automatique en cas d'√©chec de connexion
/// - Validation de l'√©tat de connexion avec timeout
/// - Logs d√©taill√©s pour diagnostic
class AudioAdapterV11ConnectionFix {
  static const String _tag = 'AudioAdapterV11ConnectionFix';
  
  // Configuration audio
  static const int _sampleRate = 48000;
  static const int _channels = 1;
  static const int _bitsPerSample = 16;
  static const int _targetBufferDuration = 1000; // 1 seconde en ms
  static const int _maxBufferSize = _sampleRate * 2; // 2 secondes max
  
  // Configuration de connexion (NOUVEAU)
  static const int _connectionTimeoutSeconds = 30;
  static const int _connectionRetryAttempts = 3;
  static const int _connectionRetryDelayMs = 2000;
  static const int _connectionCheckIntervalMs = 500;
  
  // √âtat
  final LiveKitService _liveKitService;
  final AudioPlayer _audioPlayer = AudioPlayer();
  List<int> _audioBuffer = [];
  int _fileCounter = 0;
  bool _isInitialized = false;
  bool _isConnected = false;
  bool _isRecording = false;
  bool _isFlushingInProgress = false;
  String? _tempDir;
  
  // √âtat de connexion (NOUVEAU)
  bool _isConnecting = false;
  DateTime? _connectionStartTime;
  Timer? _connectionCheckTimer;
  Completer<bool>? _connectionCompleter;
  
  // Gestion des fichiers audio
  final List<String> _playQueue = [];
  String? _currentPlayingFile;
  bool _isPlaying = false;
  
  // Callbacks
  Function(String)? onTextReceived;
  Function(String)? onError;
  Function(String)? onConnectionStatusChanged; // NOUVEAU
  
  AudioAdapterV11ConnectionFix(this._liveKitService);
  
  /// Initialise l'adaptateur V11
  Future<bool> initialize() async {
    try {
      logger.i(_tag, 'üîß [V11_CONNECTION_FIX] Initialisation AudioAdapter V11...');
      
      // Obtenir le r√©pertoire temporaire
      final directory = await getTemporaryDirectory();
      _tempDir = directory.path;
      
      // Configurer le lecteur audio
      await _setupAudioPlayer();
      
      // Configurer les callbacks de connexion LiveKit
      _setupLiveKitCallbacks();
      
      _isInitialized = true;
      logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] AudioAdapter V11 initialis√© avec correction de connexion');
      return true;
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur initialisation: $e');
      onError?.call('Erreur d\'initialisation: $e');
      return false;
    }
  }
  
  /// Configure les callbacks LiveKit pour surveiller la connexion
  void _setupLiveKitCallbacks() {
    _liveKitService.onConnectionStateChanged = (state) {
      logger.i(_tag, 'üîó [V11_CONNECTION_FIX] √âtat connexion LiveKit: $state');
      
      switch (state) {
        case ConnectionState.connected:
          _onLiveKitConnected();
          break;
        case ConnectionState.disconnected:
          _onLiveKitDisconnected();
          break;
        case ConnectionState.connecting:
          _onLiveKitConnecting();
          break;
        case ConnectionState.reconnecting:
          _onLiveKitReconnecting();
          break;
      }
      
      onConnectionStatusChanged?.call(state.toString());
    };
  }
  
  /// G√®re l'√©v√©nement de connexion LiveKit
  void _onLiveKitConnected() {
    logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] LiveKit connect√© !');
    _isConnected = true;
    _isConnecting = false;
    
    // Compl√©ter le Future de connexion si en attente
    if (_connectionCompleter != null && !_connectionCompleter!.isCompleted) {
      _connectionCompleter!.complete(true);
    }
    
    // Arr√™ter le timer de v√©rification
    _connectionCheckTimer?.cancel();
    _connectionCheckTimer = null;
  }
  
  /// G√®re l'√©v√©nement de d√©connexion LiveKit
  void _onLiveKitDisconnected() {
    logger.w(_tag, '‚ùå [V11_CONNECTION_FIX] LiveKit d√©connect√© !');
    _isConnected = false;
    _isConnecting = false;
    
    // Compl√©ter le Future de connexion avec √©chec si en attente
    if (_connectionCompleter != null && !_connectionCompleter!.isCompleted) {
      _connectionCompleter!.complete(false);
    }
    
    // Arr√™ter l'enregistrement si en cours
    if (_isRecording) {
      logger.w(_tag, 'üõë [V11_CONNECTION_FIX] Arr√™t enregistrement suite √† d√©connexion');
      _isRecording = false;
    }
  }
  
  /// G√®re l'√©v√©nement de connexion en cours
  void _onLiveKitConnecting() {
    logger.i(_tag, 'üîÑ [V11_CONNECTION_FIX] LiveKit en cours de connexion...');
    _isConnecting = true;
    _isConnected = false;
  }
  
  /// G√®re l'√©v√©nement de reconnexion
  void _onLiveKitReconnecting() {
    logger.i(_tag, 'üîÑ [V11_CONNECTION_FIX] LiveKit en cours de reconnexion...');
    _isConnecting = true;
    _isConnected = false;
  }
  
  /// Configure le lecteur audio
  Future<void> _setupAudioPlayer() async {
    try {
      // Configurer les √©v√©nements du lecteur
      _audioPlayer.playerStateStream.listen((state) {
        logger.v(_tag, 'üéµ [V11_CONNECTION_FIX] √âtat chang√©: playing=${state.playing}, processingState=${state.processingState}');
        
        if (state.processingState == ProcessingState.completed) {
          _onAudioCompleted();
        }
      });
      
      // Configurer la vitesse normale
      await _audioPlayer.setSpeed(1.0);
      logger.i(_tag, 'üéõÔ∏è [V11_CONNECTION_FIX] Vitesse de lecture configur√©e: 1.0x');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur configuration lecteur: $e');
      throw e;
    }
  }
  
  /// Connecte √† LiveKit avec retry et attente active
  Future<bool> connectToLiveKit(SessionModel session) async {
    try {
      logger.i(_tag, 'üîó [V11_CONNECTION_FIX] D√©but connexion LiveKit avec retry...');
      
      if (!_isInitialized) {
        await initialize();
      }
      
      // Configurer le callback pour recevoir les donn√©es audio
      _liveKitService.onDataReceived = _onAudioDataReceived;
      
      // Tentatives de connexion avec retry
      for (int attempt = 1; attempt <= _connectionRetryAttempts; attempt++) {
        logger.i(_tag, 'üîÑ [V11_CONNECTION_FIX] Tentative de connexion $attempt/$_connectionRetryAttempts');
        
        final success = await _attemptConnection(session, attempt);
        
        if (success) {
          logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] Connexion r√©ussie √† la tentative $attempt');
          return true;
        }
        
        if (attempt < _connectionRetryAttempts) {
          logger.w(_tag, '‚è≥ [V11_CONNECTION_FIX] Tentative $attempt √©chou√©e, retry dans ${_connectionRetryDelayMs}ms...');
          await Future.delayed(Duration(milliseconds: _connectionRetryDelayMs));
        }
      }
      
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] √âchec de connexion apr√®s $_connectionRetryAttempts tentatives');
      onError?.call('√âchec de connexion LiveKit apr√®s plusieurs tentatives');
      return false;
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur connexion: $e');
      onError?.call('Erreur de connexion: $e');
      return false;
    }
  }
  
  /// Tente une connexion LiveKit avec attente active
  Future<bool> _attemptConnection(SessionModel session, int attemptNumber) async {
    try {
      _connectionStartTime = DateTime.now();
      _connectionCompleter = Completer<bool>();
      
      logger.i(_tag, 'üåê [V11_CONNECTION_FIX] Tentative $attemptNumber: Connexion √† ${session.livekitUrl}');
      
      // D√©marrer la connexion LiveKit
      final connectFuture = _liveKitService.connectWithToken(
        session.livekitUrl,
        session.token,
        roomName: session.roomName,
      );
      
      // D√©marrer le timer de v√©rification de connexion
      _startConnectionCheckTimer();
      
      // Attendre soit la connexion, soit le timeout
      final results = await Future.wait([
        connectFuture,
        _connectionCompleter!.future,
      ], eagerError: true);
      
      final connectResult = results[0] as bool;
      final callbackResult = results[1] as bool;
      
      logger.i(_tag, 'üìä [V11_CONNECTION_FIX] R√©sultats connexion: connectWithToken=$connectResult, callback=$callbackResult');
      
      // La connexion est r√©ussie si les deux sont vrais
      final success = connectResult && callbackResult && _isConnected;
      
      if (success) {
        logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] Connexion valid√©e avec succ√®s');
      } else {
        logger.w(_tag, '‚ùå [V11_CONNECTION_FIX] Connexion √©chou√©e ou incompl√®te');
      }
      
      return success;
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Exception lors de la tentative $attemptNumber: $e');
      
      // Nettoyer en cas d'erreur
      _connectionCheckTimer?.cancel();
      if (_connectionCompleter != null && !_connectionCompleter!.isCompleted) {
        _connectionCompleter!.complete(false);
      }
      
      return false;
    }
  }
  
  /// D√©marre le timer de v√©rification de connexion
  void _startConnectionCheckTimer() {
    _connectionCheckTimer?.cancel();
    
    _connectionCheckTimer = Timer.periodic(
      Duration(milliseconds: _connectionCheckIntervalMs),
      (timer) {
        final elapsed = DateTime.now().difference(_connectionStartTime!);
        
        logger.v(_tag, '‚è±Ô∏è [V11_CONNECTION_FIX] V√©rification connexion: ${elapsed.inSeconds}s, isConnected=$_isConnected');
        
        // Timeout atteint
        if (elapsed.inSeconds >= _connectionTimeoutSeconds) {
          logger.w(_tag, '‚è∞ [V11_CONNECTION_FIX] Timeout de connexion atteint (${_connectionTimeoutSeconds}s)');
          timer.cancel();
          
          if (_connectionCompleter != null && !_connectionCompleter!.isCompleted) {
            _connectionCompleter!.complete(false);
          }
          return;
        }
        
        // Connexion √©tablie
        if (_isConnected) {
          logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] Connexion d√©tect√©e apr√®s ${elapsed.inSeconds}s');
          timer.cancel();
          
          if (_connectionCompleter != null && !_connectionCompleter!.isCompleted) {
            _connectionCompleter!.complete(true);
          }
        }
      },
    );
  }
  
  /// D√©marre l'enregistrement avec v√©rification de connexion
  Future<bool> startRecording() async {
    try {
      logger.i(_tag, 'üéôÔ∏è [V11_CONNECTION_FIX] D√©marrage enregistrement avec v√©rification...');
      
      // CORRECTION CRITIQUE: V√©rifier la connexion avant de d√©marrer
      if (!_isConnected) {
        logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Pas de connexion LiveKit active');
        
        // Attendre un peu au cas o√π la connexion serait en cours
        if (_isConnecting) {
          logger.i(_tag, '‚è≥ [V11_CONNECTION_FIX] Connexion en cours, attente...');
          
          // Attendre jusqu'√† 10 secondes pour que la connexion s'√©tablisse
          for (int i = 0; i < 20; i++) {
            await Future.delayed(Duration(milliseconds: 500));
            if (_isConnected) {
              logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] Connexion √©tablie, d√©marrage enregistrement');
              break;
            }
          }
        }
        
        if (!_isConnected) {
          throw Exception('Non connect√© √† LiveKit - impossible de d√©marrer l\'enregistrement');
        }
      }
      
      _isRecording = true;
      
      logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] Enregistrement d√©marr√© avec connexion valid√©e');
      return true;
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur d√©marrage: $e');
      onError?.call('Erreur de d√©marrage: $e');
      return false;
    }
  }
  
  /// Arr√™te l'enregistrement
  Future<bool> stopRecording() async {
    try {
      logger.i(_tag, 'üõë [V11_CONNECTION_FIX] Arr√™t enregistrement...');
      
      _isRecording = false;
      
      // Flush final du buffer
      if (_audioBuffer.isNotEmpty) {
        await _flushAudioBuffer();
      }
      
      // Nettoyer
      await _cleanup();
      
      logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] Enregistrement arr√™t√©');
      return true;
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur arr√™t: $e');
      onError?.call('Erreur d\'arr√™t: $e');
      return false;
    }
  }
  
  /// Traite les donn√©es audio re√ßues
  void _onAudioDataReceived(Uint8List data) {
    if (!_isRecording || data.isEmpty) return;
    
    try {
      logger.v(_tag, 'üì• [V11_CONNECTION_FIX] Donn√©es re√ßues: ${data.length} octets');
      
      // Ajouter au buffer
      _audioBuffer.addAll(data);
      
      final bufferDurationMs = (_audioBuffer.length / (_sampleRate * 2 / 1000)).round();
      logger.v(_tag, 'üìä [V11_CONNECTION_FIX] Buffer: ${_audioBuffer.length} bytes (~${bufferDurationMs}ms)');
      
      // Flush si n√©cessaire
      _checkAndFlush();
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur traitement donn√©es: $e');
    }
  }
  
  /// V√©rifie et flush le buffer
  void _checkAndFlush() {
    if (_isFlushingInProgress) {
      logger.v(_tag, '‚è≥ [V11_CONNECTION_FIX] Flush d√©j√† en cours, skip');
      return;
    }
    
    final bufferSizeBytes = _audioBuffer.length;
    final targetBytes = (_targetBufferDuration * _sampleRate * 2 / 1000).round();
    
    if (bufferSizeBytes >= targetBytes) {
      final bufferDurationMs = (bufferSizeBytes / (_sampleRate * 2 / 1000)).round();
      logger.i(_tag, 'üîÑ [V11_CONNECTION_FIX] Flush n√©cessaire: buffer plein ($bufferSizeBytes bytes, ~${bufferDurationMs}ms)');
      _flushAudioBuffer();
    }
  }
  
  /// Flush le buffer audio
  Future<void> _flushAudioBuffer() async {
    if (_isFlushingInProgress || _audioBuffer.isEmpty) return;
    
    try {
      _isFlushingInProgress = true;
      
      final bufferCopy = List<int>.from(_audioBuffer);
      _audioBuffer.clear();
      
      final bufferDurationMs = (bufferCopy.length / (_sampleRate * 2 / 1000)).round();
      logger.i(_tag, 'üîä [V11_CONNECTION_FIX] D√âBUT Flush: ${bufferCopy.length} bytes (~${bufferDurationMs}ms)');
      
      // Cr√©er fichier WAV
      final fileName = 'audio_chunk_${_fileCounter}.wav';
      final filePath = '$_tempDir/$fileName';
      _fileCounter++;
      
      await _createWavFile(filePath, bufferCopy);
      
      // D√©marrer la lecture
      await _playAudio(filePath, fileName);
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur flush: $e');
      onError?.call('Erreur flush: $e');
    } finally {
      _isFlushingInProgress = false;
    }
  }
  
  /// Cr√©e un fichier WAV
  Future<void> _createWavFile(String filePath, List<int> audioData) async {
    try {
      final file = File(filePath);
      final header = _createWavHeader(audioData.length, _sampleRate);
      
      // √âcrire le fichier
      await file.writeAsBytes([...header, ...audioData]);
      
      final durationMs = (audioData.length / (_sampleRate * 2 / 1000)).round();
      logger.i(_tag, 'üíæ [V11_CONNECTION_FIX] Fichier cr√©√©: $filePath (${audioData.length + 44} bytes, ~${durationMs}ms)');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur cr√©ation fichier: $e');
      throw e;
    }
  }
  
  /// Joue l'audio
  Future<void> _playAudio(String filePath, String fileName) async {
    try {
      logger.i(_tag, 'üîä [V11_CONNECTION_FIX] D√©marrage lecture: $fileName');
      
      // Ajouter √† la queue de lecture
      _playQueue.add(filePath);
      
      // Si aucune lecture en cours, d√©marrer imm√©diatement
      if (!_isPlaying) {
        await _playNextInQueue();
      }
      
      logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] FIN Flush: $fileName');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur lecture: $e');
      onError?.call('Erreur de lecture: $e');
    }
  }
  
  /// Joue le prochain fichier dans la queue
  Future<void> _playNextInQueue() async {
    if (_playQueue.isEmpty || _isPlaying) return;
    
    try {
      _isPlaying = true;
      final filePath = _playQueue.removeAt(0);
      _currentPlayingFile = filePath;
      
      final fileName = filePath.split('/').last;
      logger.i(_tag, 'üéµ [V11_CONNECTION_FIX] D√©marrage lecture: $fileName');
      
      // D√©marrer la lecture
      await _audioPlayer.setFilePath(filePath);
      await _audioPlayer.play();
      
      logger.i(_tag, '‚úÖ [V11_CONNECTION_FIX] Lecture d√©marr√©e: $fileName');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur lecture queue: $e');
      _isPlaying = false;
      _currentPlayingFile = null;
      // Essayer le suivant
      _playNextInQueue();
    }
  }
  
  /// G√®re la fin de lecture d'un fichier
  void _onAudioCompleted() {
    logger.v(_tag, 'üéß [V11_CONNECTION_FIX] Fichier termin√©');
    
    // Marquer la lecture comme termin√©e
    final completedFile = _currentPlayingFile;
    _isPlaying = false;
    _currentPlayingFile = null;
    
    // Supprimer le fichier termin√© apr√®s un d√©lai de s√©curit√©
    if (completedFile != null) {
      Timer(const Duration(milliseconds: 500), () {
        _deleteSpecificFile(completedFile);
      });
    }
    
    // Jouer le prochain fichier dans la queue
    Timer(const Duration(milliseconds: 50), () {
      _playNextInQueue();
    });
  }
  
  /// Supprime un fichier sp√©cifique
  void _deleteSpecificFile(String filePath) async {
    try {
      final file = File(filePath);
      if (await file.exists()) {
        await file.delete();
        final fileName = filePath.split('/').last;
        logger.v(_tag, 'üóëÔ∏è [V11_CONNECTION_FIX] Fichier supprim√©: $fileName');
      }
    } catch (e) {
      logger.w(_tag, '‚ö†Ô∏è [V11_CONNECTION_FIX] Erreur suppression fichier: $e');
    }
  }
  
  /// Cr√©e l'en-t√™te WAV
  List<int> _createWavHeader(int dataSize, int sampleRate) {
    final header = <int>[];
    
    // RIFF header
    header.addAll('RIFF'.codeUnits);
    header.addAll(_intToBytes(36 + dataSize, 4));
    header.addAll('WAVE'.codeUnits);
    
    // fmt chunk
    header.addAll('fmt '.codeUnits);
    header.addAll(_intToBytes(16, 4)); // Chunk size
    header.addAll(_intToBytes(1, 2));  // Audio format (PCM)
    header.addAll(_intToBytes(_channels, 2));
    header.addAll(_intToBytes(sampleRate, 4)); // Sample rate
    header.addAll(_intToBytes(sampleRate * _channels * _bitsPerSample ~/ 8, 4)); // Byte rate
    header.addAll(_intToBytes(_channels * _bitsPerSample ~/ 8, 2)); // Block align
    header.addAll(_intToBytes(_bitsPerSample, 2));
    
    // data chunk
    header.addAll('data'.codeUnits);
    header.addAll(_intToBytes(dataSize, 4));
    
    return header;
  }
  
  /// Convertit un entier en bytes little-endian
  List<int> _intToBytes(int value, int bytes) {
    final result = <int>[];
    for (int i = 0; i < bytes; i++) {
      result.add((value >> (8 * i)) & 0xFF);
    }
    return result;
  }
  
  /// Nettoie les ressources
  Future<void> _cleanup() async {
    try {
      logger.i(_tag, 'üßπ [V11_CONNECTION_FIX] Nettoyage...');
      
      // Arr√™ter les timers
      _connectionCheckTimer?.cancel();
      _connectionCheckTimer = null;
      
      // Arr√™ter la lecture
      await _audioPlayer.stop();
      _isPlaying = false;
      _currentPlayingFile = null;
      
      // Vider la queue
      _playQueue.clear();
      
      // Supprimer tous les fichiers temporaires
      await _deleteAllTempFiles();
      
      logger.i(_tag, 'üßπ [V11_CONNECTION_FIX] Nettoyage termin√©');
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur nettoyage: $e');
    }
  }
  
  /// Supprime tous les fichiers temporaires
  Future<void> _deleteAllTempFiles() async {
    try {
      if (_tempDir == null) return;
      
      final dir = Directory(_tempDir!);
      final files = await dir.list().toList();
      
      for (final file in files) {
        if (file is File && file.path.contains('audio_chunk_')) {
          try {
            await file.delete();
            final fileName = file.path.split('/').last;
            logger.v(_tag, 'üóëÔ∏è [V11_CONNECTION_FIX] Fichier supprim√©: $fileName');
          } catch (e) {
            // Ignorer les erreurs de suppression
          }
        }
      }
    } catch (e) {
      // Ignorer les erreurs de nettoyage
    }
  }
  
  /// Dispose les ressources
  Future<void> dispose() async {
    try {
      _isRecording = false;
      _isConnected = false;
      _isConnecting = false;
      _isPlaying = false;
      
      await _cleanup();
      await _audioPlayer.dispose();
      
      logger.i(_tag, 'üßπ [V11_CONNECTION_FIX] Ressources lib√©r√©es');
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_CONNECTION_FIX] Erreur dispose: $e');
    }
  }
  
  // Getters
  bool get isInitialized => _isInitialized;
  bool get isConnected => _isConnected;
  bool get isConnecting => _isConnecting;
  bool get isRecording => _isRecording;
  bool get isPlaying => _isPlaying;
  int get queueLength => _playQueue.length;
  String? get currentFile => _currentPlayingFile;
  String get connectionStatus {
    if (_isConnected) return 'Connect√©';
    if (_isConnecting) return 'Connexion en cours...';
    return 'D√©connect√©';
  }
  
  // M√©thode de test pour simuler des donn√©es audio
  void simulateAudioData(Uint8List data) {
    _onAudioDataReceived(data);
  }
}
import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';
import 'package:just_audio/just_audio.dart';
import 'package:path_provider/path_provider.dart';
import 'package:eloquence_2_0/core/utils/logger_service.dart';
import 'package:eloquence_2_0/src/services/livekit_service.dart';
import 'package:eloquence_2_0/data/models/session_model.dart';

/// AudioAdapter V11 - Contr√¥le de vitesse et streaming continu
/// 
/// Nouveaut√©s V11:
/// - Contr√¥le pr√©cis de la vitesse de lecture
/// - D√©tection automatique du sample rate
/// - Ajustement tempo en temps r√©el
/// - Streaming continu optimis√©
class AudioAdapterV11SpeedControl {
  static const String _tag = 'AudioAdapterV11SpeedControl';
  
  // Configuration audio
  static const int _sampleRate = 48000;
  static const int _channels = 1;
  static const int _bitsPerSample = 16;
  static const int _targetBufferDuration = 1000; // 1 seconde en ms
  static const int _maxBufferSize = _sampleRate * 2; // 2 secondes max
  
  // Contr√¥le de vitesse (NOUVEAU V11)
  static const double _targetPlaybackSpeed = 1.0; // Vitesse normale
  static const double _minSpeed = 0.5; // Vitesse minimum
  static const double _maxSpeed = 2.0; // Vitesse maximum
  
  // √âtat
  final LiveKitService _liveKitService;
  final AudioPlayer _audioPlayer = AudioPlayer();
  List<int> _audioBuffer = [];
  int _fileCounter = 0;
  bool _isInitialized = false;
  bool _isConnected = false;
  bool _isRecording = false;
  bool _isFlushingInProgress = false;
  String? _tempDir;
  
  // Gestion des fichiers audio
  final List<String> _playQueue = [];
  String? _currentPlayingFile;
  bool _isPlaying = false;
  
  // Contr√¥le de vitesse
  double _currentSpeed = 1.0;
  DateTime? _lastReceiveTime;
  int _totalBytesReceived = 0;
  DateTime? _startTime;
  
  // Callbacks
  Function(String)? onTextReceived;
  Function(String)? onError;
  
  AudioAdapterV11SpeedControl(this._liveKitService);
  
  /// Initialise l'adaptateur V11
  Future<bool> initialize() async {
    try {
      logger.i(_tag, 'üîß [V11_SPEED] Initialisation AudioAdapter V11...');
      
      // Obtenir le r√©pertoire temporaire
      final directory = await getTemporaryDirectory();
      _tempDir = directory.path;
      
      // Configurer le lecteur audio avec contr√¥le de vitesse
      await _setupAudioPlayer();
      
      _isInitialized = true;
      logger.i(_tag, '‚úÖ [V11_SPEED] AudioAdapter V11 initialis√© avec contr√¥le de vitesse');
      return true;
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur initialisation: $e');
      onError?.call('Erreur d\'initialisation: $e');
      return false;
    }
  }
  
  /// Configure le lecteur audio avec contr√¥le de vitesse
  Future<void> _setupAudioPlayer() async {
    try {
      // Configurer les √©v√©nements du lecteur
      _audioPlayer.playerStateStream.listen((state) {
        logger.v(_tag, 'üéµ [V11_SPEED] √âtat chang√©: playing=${state.playing}, processingState=${state.processingState}');
        
        if (state.processingState == ProcessingState.completed) {
          _onAudioCompleted();
        }
      });
      
      // Configurer les √©v√©nements de position pour debug
      _audioPlayer.positionStream.listen((position) {
        if (_currentPlayingFile != null) {
          logger.v(_tag, '‚è±Ô∏è [V11_SPEED] Position: ${position.inMilliseconds}ms - ${_currentPlayingFile}');
        }
      });
      
      // CORRECTION: Utiliser vitesse normale pour qualit√© optimale
      const normalSpeed = 1.0;
      await _audioPlayer.setSpeed(normalSpeed);
      logger.i(_tag, 'üéõÔ∏è [V11_SPEED] Vitesse de lecture configur√©e: ${normalSpeed}x (qualit√© optimale)');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur configuration lecteur: $e');
      throw e;
    }
  }
  
  /// Connecte √† LiveKit
  Future<bool> connectToLiveKit(SessionModel session) async {
    try {
      logger.i(_tag, 'üîó [V11_SPEED] Connexion LiveKit...');
      
      if (!_isInitialized) {
        await initialize();
      }
      
      // Configurer le callback pour recevoir les donn√©es audio avec contr√¥le de vitesse
      _liveKitService.onDataReceived = _onAudioDataReceived;
      
      // üîß CORRECTION: Configurer callback de connexion room pour synchronisation imm√©diate
      _liveKitService.onConnectionStateChanged = (ConnectionState state) {
        if (state == ConnectionState.connected && !_isConnected) {
          logger.i(_tag, 'üîß [V11_SPEED] CORRECTION: Room connect√©e, mise √† jour √©tat adapter');
          _isConnected = true;
          _startTime = DateTime.now();
        } else if (state == ConnectionState.disconnected && _isConnected) {
          logger.i(_tag, 'üîß [V11_SPEED] CORRECTION: Room d√©connect√©e, mise √† jour √©tat adapter');
          _isConnected = false;
        }
      };
      
      // Connecter via LiveKitService avec la bonne m√©thode
      final success = await _liveKitService.connectWithToken(
        session.livekitUrl,
        session.token,
        roomName: session.roomName,
      );
      
      if (success) {
        // L'√©tat _isConnected est d√©j√† mis √† jour via le callback ci-dessus
        if (!_isConnected) {
          _isConnected = true; // Fallback au cas o√π le callback n'aurait pas √©t√© appel√©
          _startTime = DateTime.now();
        }
        logger.i(_tag, '‚úÖ [V11_SPEED] Connexion LiveKit r√©ussie avec contr√¥le de vitesse');
        return true;
      } else {
        _isConnected = false; // S'assurer que l'√©tat est coh√©rent
        logger.e(_tag, '‚ùå [V11_SPEED] √âchec de la connexion LiveKit');
        onError?.call('√âchec de la connexion LiveKit');
        return false;
      }
    } catch (e) {
      _isConnected = false; // S'assurer que l'√©tat est coh√©rent en cas d'erreur
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur connexion: $e');
      onError?.call('Erreur de connexion: $e');
      return false;
    }
  }
  
  /// D√©marre l'enregistrement
  Future<bool> startRecording() async {
    try {
      logger.i(_tag, 'üéôÔ∏è [V11_SPEED] D√©marrage enregistrement...');
      
      if (!_isConnected) {
        throw Exception('Non connect√© √† LiveKit');
      }
      
      _isRecording = true;
      _totalBytesReceived = 0;
      _startTime = DateTime.now();
      
      logger.i(_tag, '‚úÖ [V11_SPEED] Enregistrement d√©marr√© avec contr√¥le de vitesse');
      return true;
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur d√©marrage: $e');
      onError?.call('Erreur de d√©marrage: $e');
      return false;
    }
  }
  
  /// Arr√™te l'enregistrement
  Future<bool> stopRecording() async {
    try {
      logger.i(_tag, 'üõë [V11_SPEED] Arr√™t enregistrement...');
      
      _isRecording = false;
      
      // Flush final du buffer
      if (_audioBuffer.isNotEmpty) {
        await _flushAudioBufferWithSpeedControl();
      }
      
      // Nettoyer
      await _cleanup();
      
      logger.i(_tag, '‚úÖ [V11_SPEED] Enregistrement arr√™t√©');
      return true;
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur arr√™t: $e');
      onError?.call('Erreur d\'arr√™t: $e');
      return false;
    }
  }
  
  /// Traite les donn√©es audio re√ßues avec contr√¥le de vitesse
  void _onAudioDataReceived(Uint8List data) {
    logger.i(_tag, 'üì• [V11_SPEED] Appel _onAudioDataReceived avec ${data.length} octets.'); // Log d'entr√©e
    if (!_isRecording || data.isEmpty) {
      logger.w(_tag, '‚ö†Ô∏è [V11_SPEED] _onAudioDataReceived ignor√©: isRecording=$_isRecording, data.isEmpty=${data.isEmpty}');
      return;
    }
    
    try {
      _lastReceiveTime = DateTime.now();
      _totalBytesReceived += data.length;
      
      // Calculer la vitesse de r√©ception actuelle
      _calculateReceiveSpeed();
      
      logger.i(_tag, 'üì• [V11_SPEED] Donn√©es re√ßues: ${data.length} octets (vitesse: ${_currentSpeed.toStringAsFixed(2)}x)');
      
      // Ajouter au buffer
      _audioBuffer.addAll(data);
      
      final bufferDurationMs = (_audioBuffer.length / (_sampleRate * 2 / 1000)).round();
      logger.i(_tag, 'üìä [V11_SPEED] Buffer actuel: ${_audioBuffer.length} bytes (~${bufferDurationMs}ms)'); // Log du buffer
      
      // Flush si n√©cessaire avec contr√¥le de vitesse
      _checkAndFlushWithSpeedControl();
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur traitement donn√©es: $e');
    }
  }
  
  /// Calcule la vitesse de r√©ception pour ajustement
  void _calculateReceiveSpeed() {
    if (_startTime == null || _lastReceiveTime == null) return;
    
    final elapsedMs = _lastReceiveTime!.difference(_startTime!).inMilliseconds;
    if (elapsedMs <= 0) return;
    
    // Calculer la quantit√© d'audio re√ßue en temps
    final audioTimeMs = (_totalBytesReceived / (_sampleRate * 2 / 1000)).round();
    
    if (audioTimeMs > 0) {
      // Calculer le ratio vitesse r√©ception / temps r√©el
      final speedRatio = elapsedMs / audioTimeMs;
      _currentSpeed = speedRatio.clamp(_minSpeed, _maxSpeed);
      
      logger.v(_tag, 'üìä [V11_SPEED] Vitesse calcul√©e: ${_currentSpeed.toStringAsFixed(2)}x (${audioTimeMs}ms audio en ${elapsedMs}ms r√©el)');
    }
  }
  
  /// V√©rifie et flush avec contr√¥le de vitesse
  void _checkAndFlushWithSpeedControl() {
    if (_isFlushingInProgress) {
      logger.v(_tag, '‚è≥ [V11_SPEED] Flush d√©j√† en cours, skip');
      return;
    }
    
    final bufferSizeBytes = _audioBuffer.length;
    final targetBytes = (_targetBufferDuration * _sampleRate * 2 / 1000).round();
    
    if (bufferSizeBytes >= targetBytes) {
      final bufferDurationMs = (bufferSizeBytes / (_sampleRate * 2 / 1000)).round();
      logger.i(_tag, 'üîÑ [V11_SPEED] Flush n√©cessaire: buffer plein ($bufferSizeBytes bytes, ~${bufferDurationMs}ms)');
      _flushAudioBufferWithSpeedControl();
    }
  }
  
  /// Flush le buffer audio avec contr√¥le de vitesse
  Future<void> _flushAudioBufferWithSpeedControl() async {
    logger.i(_tag, 'üîä [V11_SPEED] Appel _flushAudioBufferWithSpeedControl. isFlushingInProgress=$_isFlushingInProgress, _audioBuffer.isEmpty=${_audioBuffer.isEmpty}'); // Log d'entr√©e
    if (_isFlushingInProgress || _audioBuffer.isEmpty) return;
    
    try {
      _isFlushingInProgress = true;
      
      final bufferCopy = List<int>.from(_audioBuffer);
      _audioBuffer.clear();
      
      final bufferDurationMs = (bufferCopy.length / (_sampleRate * 2 / 1000)).round();
      logger.i(_tag, 'üîä [V11_SPEED] D√âBUT Flush avec contr√¥le vitesse: ${bufferCopy.length} bytes (~${bufferDurationMs}ms)');
      
      // Cr√©er fichier WAV avec m√©tadonn√©es de vitesse
      final fileName = 'audio_chunk_${_fileCounter}.wav';
      final filePath = '$_tempDir/$fileName';
      _fileCounter++;
      
      logger.i(_tag, 'üíæ [V11_SPEED] Cr√©ation du fichier WAV: $filePath'); // Log de cr√©ation de fichier
      await _createWavFileWithSpeedControl(filePath, bufferCopy);
      
      // D√©marrer la lecture avec vitesse ajust√©e
      logger.i(_tag, 'üîä [V11_SPEED] D√©marrage de la lecture pour: $fileName'); // Log de d√©marrage de lecture
      await _playAudioWithSpeedControl(filePath, fileName);
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur flush avec contr√¥le vitesse: $e');
      onError?.call('Erreur flush: $e');
    } finally {
      _isFlushingInProgress = false;
      logger.i(_tag, 'üîä [V11_SPEED] FIN Flush avec contr√¥le vitesse.'); // Log de fin de flush
    }
  }
  
  /// Cr√©e un fichier WAV avec contr√¥le de vitesse
  Future<void> _createWavFileWithSpeedControl(String filePath, List<int> audioData) async {
    try {
      final file = File(filePath);
      
      // CORRECTION: Utiliser le sample rate ORIGINAL pour pr√©server la qualit√©
      // Le contr√¥le de vitesse se fait via le lecteur audio, pas via le sample rate
      final header = _createWavHeader(audioData.length, _sampleRate);
      
      // √âcrire le fichier
      await file.writeAsBytes([...header, ...audioData]);
      
      final durationMs = (audioData.length / (_sampleRate * 2 / 1000)).round();
      logger.i(_tag, 'üíæ [V11_SPEED] Fichier cr√©√©: $filePath (${audioData.length + 44} bytes, ~${durationMs}ms, sample rate: ${_sampleRate}Hz)');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur cr√©ation fichier: $e');
      throw e;
    }
  }
  
  /// Calcule la vitesse de lecture optimale
  double _calculateOptimalSpeed() {
    // Si la vitesse calcul√©e indique que l'audio arrive trop vite,
    // on ralentit la lecture pour compenser
    if (_currentSpeed > 1.2) {
      return 0.8; // Ralentir si l'audio arrive trop vite
    } else if (_currentSpeed < 0.8) {
      return 1.2; // Acc√©l√©rer si l'audio arrive trop lentement
    }
    return 1.0; // Vitesse normale
  }
  
  /// Joue l'audio avec contr√¥le de vitesse
  Future<void> _playAudioWithSpeedControl(String filePath, String fileName) async {
    try {
      logger.i(_tag, 'üîä [V11_SPEED] D√©marrage lecture avec contr√¥le vitesse...');
      logger.i(_tag, 'üîä [V11_SPEED] Lecture: $fileName');
      
      // Ajouter √† la queue de lecture
      _playQueue.add(filePath);
      
      // Si aucune lecture en cours, d√©marrer imm√©diatement
      if (!_isPlaying) {
        await _playNextInQueue();
      }
      
      logger.i(_tag, '‚úÖ [V11_SPEED] FIN Flush avec contr√¥le vitesse: $fileName');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur lecture: $e');
      onError?.call('Erreur de lecture: $e');
    }
  }
  
  /// Joue le prochain fichier dans la queue
  Future<void> _playNextInQueue() async {
    logger.i(_tag, 'üéµ [V11_SPEED] Appel _playNextInQueue. _playQueue.isEmpty=${_playQueue.isEmpty}, _isPlaying=$_isPlaying'); // Log d'entr√©e
    if (_playQueue.isEmpty || _isPlaying) return;
    
    try {
      _isPlaying = true;
      final filePath = _playQueue.removeAt(0);
      _currentPlayingFile = filePath;
      
      final fileName = filePath.split('/').last;
      logger.i(_tag, 'üéµ [V11_SPEED] D√©marrage lecture: $fileName');
      
      // Appliquer la vitesse optimale calcul√©e
      final playbackSpeed = _calculateOptimalSpeed();
      logger.i(_tag, 'üéõÔ∏è [V11_SPEED] Application vitesse de lecture: ${playbackSpeed}x'); // Log de vitesse appliqu√©e
      await _audioPlayer.setSpeed(playbackSpeed);
      
      logger.i(_tag, 'üéõÔ∏è [V11_SPEED] Vitesse lecture: ${playbackSpeed}x (qualit√© optimale)');
      
      // D√©marrer la lecture
      logger.i(_tag, 'üîä [V11_SPEED] Tentative de lecture de: $fileName');
      logger.i(_tag, 'üîä [V11_SPEED] √âtat du lecteur avant play: ${_audioPlayer.playerState.processingState}, playing: ${_audioPlayer.playerState.playing}');
      
      await _audioPlayer.setFilePath(filePath);
      await _audioPlayer.play();
      
      logger.i(_tag, '‚úÖ [V11_SPEED] Lecture d√©marr√©e: $fileName (vitesse: ${playbackSpeed}x)');
      logger.i(_tag, 'üîä [V11_SPEED] √âtat du lecteur apr√®s play: ${_audioPlayer.playerState.processingState}, playing: ${_audioPlayer.playerState.playing}');
      
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur lecture queue: $e');
      _isPlaying = false;
      _currentPlayingFile = null;
      // Essayer le suivant
      _playNextInQueue();
    }
  }
  
  /// G√®re la fin de lecture d'un fichier
  void _onAudioCompleted() {
    logger.v(_tag, 'üéß [V11_SPEED] Fichier termin√©');
    
    // Marquer la lecture comme termin√©e
    final completedFile = _currentPlayingFile;
    _isPlaying = false;
    _currentPlayingFile = null;
    
    // Supprimer le fichier termin√© apr√®s un d√©lai de s√©curit√©
    if (completedFile != null) {
      Timer(const Duration(milliseconds: 500), () {
        _deleteSpecificFile(completedFile);
      });
    }
    
    // Jouer le prochain fichier dans la queue
    Timer(const Duration(milliseconds: 50), () {
      _playNextInQueue();
    });
  }
  
  /// Supprime un fichier sp√©cifique
  void _deleteSpecificFile(String filePath) async {
    try {
      final file = File(filePath);
      if (await file.exists()) {
        await file.delete();
        final fileName = filePath.split('/').last;
        logger.v(_tag, 'üóëÔ∏è [V11_SPEED] Fichier supprim√©: $fileName');
      }
    } catch (e) {
      logger.w(_tag, '‚ö†Ô∏è [V11_SPEED] Erreur suppression fichier: $e');
    }
  }
  
  /// Supprime les anciens fichiers (sauf celui en cours de lecture)
  void _deleteOldFiles() async {
    try {
      if (_tempDir == null) return;
      
      final dir = Directory(_tempDir!);
      final files = await dir.list().toList();
      
      for (final file in files) {
        if (file is File && file.path.contains('audio_chunk_')) {
          // Ne pas supprimer le fichier en cours de lecture ou ceux dans la queue
          if (_currentPlayingFile != null && file.path == _currentPlayingFile) {
            continue;
          }
          if (_playQueue.contains(file.path)) {
            continue;
          }
          
          try {
            await file.delete();
            final fileName = file.path.split('/').last;
            logger.v(_tag, 'üóëÔ∏è [V11_SPEED] Fichier supprim√©: $fileName');
          } catch (e) {
            // Ignorer les erreurs de suppression
          }
        }
      }
      
      if (_playQueue.isEmpty && _currentPlayingFile == null) {
        logger.v(_tag, 'üèÅ [V11_SPEED] Plus de fichiers √† jouer');
      }
    } catch (e) {
      // Ignorer les erreurs de nettoyage
    }
  }
  
  /// Cr√©e l'en-t√™te WAV avec sample rate ajust√©
  List<int> _createWavHeader(int dataSize, int sampleRate) {
    final header = <int>[];
    
    // RIFF header
    header.addAll('RIFF'.codeUnits);
    header.addAll(_intToBytes(36 + dataSize, 4));
    header.addAll('WAVE'.codeUnits);
    
    // fmt chunk
    header.addAll('fmt '.codeUnits);
    header.addAll(_intToBytes(16, 4)); // Chunk size
    header.addAll(_intToBytes(1, 2));  // Audio format (PCM)
    header.addAll(_intToBytes(_channels, 2));
    header.addAll(_intToBytes(sampleRate, 4)); // Sample rate ajust√©
    header.addAll(_intToBytes(sampleRate * _channels * _bitsPerSample ~/ 8, 4)); // Byte rate
    header.addAll(_intToBytes(_channels * _bitsPerSample ~/ 8, 2)); // Block align
    header.addAll(_intToBytes(_bitsPerSample, 2));
    
    // data chunk
    header.addAll('data'.codeUnits);
    header.addAll(_intToBytes(dataSize, 4));
    
    return header;
  }
  
  /// Convertit un entier en bytes little-endian
  List<int> _intToBytes(int value, int bytes) {
    final result = <int>[];
    for (int i = 0; i < bytes; i++) {
      result.add((value >> (8 * i)) & 0xFF);
    }
    return result;
  }
  
  /// Nettoie les ressources
  Future<void> _cleanup() async {
    try {
      logger.i(_tag, 'üßπ [V11_SPEED] Nettoyage avec contr√¥le vitesse...');
      
      // Arr√™ter la lecture
      await _audioPlayer.stop();
      _isPlaying = false;
      _currentPlayingFile = null;
      
      // Vider la queue
      _playQueue.clear();
      
      // Supprimer tous les fichiers temporaires
      await _deleteAllTempFiles();
      
      logger.i(_tag, 'üßπ [V11_SPEED] Nettoyage termin√©');
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur nettoyage: $e');
    }
  }
  
  /// Supprime tous les fichiers temporaires
  Future<void> _deleteAllTempFiles() async {
    try {
      if (_tempDir == null) return;
      
      final dir = Directory(_tempDir!);
      final files = await dir.list().toList();
      
      for (final file in files) {
        if (file is File && file.path.contains('audio_chunk_')) {
          try {
            await file.delete();
            final fileName = file.path.split('/').last;
            logger.v(_tag, 'üóëÔ∏è [V11_SPEED] Fichier supprim√©: $fileName');
          } catch (e) {
            // Ignorer les erreurs de suppression
          }
        }
      }
    } catch (e) {
      // Ignorer les erreurs de nettoyage
    }
  }
  
  /// Dispose les ressources
  Future<void> dispose() async {
    try {
      logger.i(_tag, 'üßπ [V11_SPEED] D√©but de dispose pour AudioAdapter...');
      _isRecording = false;
      _isConnected = false; // Important de le mettre √† false ici
      _isPlaying = false;
      
      // D√©connecter de LiveKit si le service est toujours actif et connect√©
      // Cela doit √™tre fait AVANT de nettoyer les ressources locales comme _audioPlayer
      // Utiliser une v√©rification de nullit√© pour _liveKitService au cas o√π, bien que peu probable ici.
      if (_liveKitService.isConnected) {
        logger.i(_tag, 'üßπ [V11_SPEED] D√©connexion de LiveKitService depuis AudioAdapter.dispose()...');
        await _liveKitService.disconnect(); // Assurer la d√©connexion
        logger.i(_tag, 'üßπ [V11_SPEED] LiveKitService d√©connect√©.');
      } else {
        logger.i(_tag, 'üßπ [V11_SPEED] LiveKitService d√©j√† d√©connect√© ou non connect√©, pas de d√©connexion n√©cessaire depuis AudioAdapter.');
      }
      
      await _cleanup(); // Nettoie les fichiers et arr√™te le lecteur
      await _audioPlayer.dispose(); // Dispose le lecteur audio
      
      logger.i(_tag, 'üßπ [V11_SPEED] Ressources AudioAdapter lib√©r√©es');
    } catch (e) {
      logger.e(_tag, '‚ùå [V11_SPEED] Erreur AudioAdapter.dispose: $e');
    }
  }

  /// Notifie l'adaptateur d'une d√©connexion externe (par exemple, depuis LiveKitService via LiveKitConversationNotifier)
  void notifyDisconnected() {
    logger.i(_tag, 'üîî [V11_SPEED] Notified of disconnection by external source.');
    if (_isConnected) {
      _isConnected = false;
      // Si une d√©connexion se produit, il est prudent d'arr√™ter √©galement l'enregistrement en cours.
      if (_isRecording) {
        logger.w(_tag, 'üîî [V11_SPEED] Stopping recording due to external disconnection notification.');
        // On ne peut pas appeler stopRecording() directement car c'est async et on est dans un flux sync.
        // Mais mettre _isRecording √† false emp√™chera _onAudioDataReceived de traiter plus de donn√©es.
        _isRecording = false;
      }
      logger.i(_tag, 'üîî [V11_SPEED] _isConnected set to false due to external notification.');
    } else {
      logger.i(_tag, 'üîî [V11_SPEED] Already not connected, no state change from external notification.');
    }
  }
  
  // Getters
  bool get isInitialized => _isInitialized;
  bool get isConnected => _isConnected;
  bool get isRecording => _isRecording;
  bool get isPlaying => _isPlaying;
  double get currentSpeed => _currentSpeed;
  int get queueLength => _playQueue.length;
  String? get currentFile => _currentPlayingFile;
  
  // M√©thode de test pour simuler des donn√©es audio
  void simulateAudioData(Uint8List data) {
    _onAudioDataReceived(data);
  }
}

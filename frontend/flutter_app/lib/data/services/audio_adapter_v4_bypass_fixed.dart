import 'dart:async';
import 'dart:typed_data';
import 'package:logging/logging.dart';
import '../../src/services/livekit_service.dart';
import 'audio_format_detector_v2.dart';
import 'audio_stream_player_v4_flutter_only.dart';

/// AudioAdapter V4 Bypass - Version corrig√©e avec lecteur Flutter-only
/// Contourne compl√®tement les probl√®mes de MediaPlayer Android
class AudioAdapterV4BypassFixed {
  static final Logger _logger = Logger('AudioAdapterV4BypassFixed');
  
  // Services
  final LiveKitService _liveKitService;
  final AudioFormatDetectorV2 _formatDetector = AudioFormatDetectorV2();
  late final AudioStreamPlayerV4FlutterOnly _audioPlayer;
  
  // √âtat
  bool _isInitialized = false;
  bool _isRecording = false;
  bool _isConnected = false;
  String? _error;
  
  // Callbacks
  void Function(String)? onTextReceived;
  void Function(String)? onError;
  void Function()? onRecordingStarted;
  void Function()? onRecordingStopped;
  
  // Statistiques
  int _totalChunksReceived = 0;
  int _totalChunksProcessed = 0;
  int _totalChunksRejected = 0;
  DateTime? _lastDataTime;
  
  AudioAdapterV4BypassFixed(this._liveKitService) {
    _audioPlayer = AudioStreamPlayerV4FlutterOnly();
    _logger.info('üöÄ [V4_BYPASS_FIXED] AudioAdapter V4 Bypass Fixed cr√©√©');
  }
  
  /// Initialise l'adaptateur
  Future<bool> initialize() async {
    try {
      _logger.info('üîß [V4_BYPASS_FIXED] Initialisation...');
      
      // Initialiser le lecteur audio
      final playerInitialized = await _audioPlayer.initialize();
      if (!playerInitialized) {
        throw Exception('√âchec d\'initialisation du lecteur audio');
      }
      
      // Configurer les listeners LiveKit
      _setupLiveKitListeners();
      
      _isInitialized = true;
      _isConnected = true;
      _error = null;
      
      _logger.info('‚úÖ [V4_BYPASS_FIXED] Adaptateur initialis√© avec succ√®s');
      return true;
      
    } catch (e) {
      _error = 'Erreur d\'initialisation: $e';
      _logger.severe('‚ùå [V4_BYPASS_FIXED] $_error');
      return false;
    }
  }
  
  /// Configure les listeners LiveKit
  void _setupLiveKitListeners() {
    _logger.info('üîó [V4_BYPASS_FIXED] Configuration des listeners LiveKit...');
    
    // Note: Les listeners seront configur√©s via les m√©thodes publiques
    // handleAudioData et handleJsonData appel√©es depuis l'ext√©rieur
    
    _logger.info('‚úÖ [V4_BYPASS_FIXED] Listeners configur√©s');
  }
  
  /// Traite les donn√©es audio re√ßues - Interface publique
  void handleAudioData(Uint8List audioData) {
    _handleAudioData(audioData);
  }
  
  /// Traite les donn√©es JSON re√ßues - Interface publique
  void handleJsonData(Map<String, dynamic> jsonData) {
    _handleJsonData(jsonData);
  }
  
  /// Traite les donn√©es audio re√ßues - M√©thode interne
  void _handleAudioData(Uint8List audioData) {
    if (!_isInitialized) {
      _logger.warning('‚ö†Ô∏è [V4_BYPASS_FIXED] Adaptateur non initialis√©');
      return;
    }
    
    _totalChunksReceived++;
    _lastDataTime = DateTime.now();
    
    _logger.info('üì• [V4_BYPASS_FIXED] Donn√©es audio re√ßues: ${audioData.length} octets');
    _logger.fine('üì• [V4_BYPASS_FIXED] Donn√©es audio re√ßues: ${audioData.length} octets');
    
    try {
      // Traitement des donn√©es audio
      _logger.fine('üîÑ [V4_BYPASS_FIXED] Traitement des donn√©es audio...');
      
      // Analyser et traiter les donn√©es avec AudioFormatDetectorV2
      final processingResult = AudioFormatDetectorV2.processAudioData(audioData);
      _logger.fine('üîç [V4_BYPASS_FIXED] Format d√©tect√©: ${processingResult.format}');
      
      // V√©rifier si le traitement est valide
      if (!processingResult.isValid) {
        _logger.warning('! [V4_BYPASS_FIXED] Donn√©es rejet√©es: ${processingResult.error}');
        _totalChunksRejected++;
        return;
      }
      
      // V√©rifier la qualit√© (si disponible)
      if (processingResult.quality != null && processingResult.quality! > 0.99) {
        _logger.warning('! [V4_BYPASS_FIXED] Donn√©es rejet√©es: Silence complet d√©tect√©');
        _totalChunksRejected++;
        return;
      }
      
      // Utiliser les donn√©es optimis√©es ou les donn√©es originales
      final dataToPlay = processingResult.data ?? audioData;
      _logger.fine('‚úÖ [V4_BYPASS_FIXED] Donn√©es valid√©es: ${processingResult.format}, qualit√©: ${processingResult.quality?.toStringAsFixed(3) ?? 'N/A'}');
      
      // Envoyer au lecteur
      _audioPlayer.addAudioChunk(dataToPlay);
      _logger.fine('üéµ [V4_BYPASS_FIXED] Donn√©es envoy√©es au lecteur Flutter-only');
      
      _totalChunksProcessed++;
      
    } catch (e) {
      _logger.warning('‚ö†Ô∏è [V4_BYPASS_FIXED] Erreur de traitement audio: $e');
      _totalChunksRejected++;
    }
  }
  
  /// Traite les donn√©es JSON re√ßues
  void _handleJsonData(Map<String, dynamic> jsonData) {
    try {
      _logger.info('üì® [V4_BYPASS_FIXED] Donn√©es JSON re√ßues: $jsonData');
      
      final type = jsonData['type'] as String?;
      
      if (type == 'transcription' || type == 'text') {
        final text = jsonData['text'] as String?;
        if (text != null && text.isNotEmpty) {
          onTextReceived?.call(text);
        }
      } else if (type == 'audio_control') {
        final event = jsonData['event'] as String?;
        _logger.info('üéõÔ∏è [V4_BYPASS_FIXED] Contr√¥le audio: $event');
      }
      
    } catch (e) {
      _logger.warning('‚ö†Ô∏è [V4_BYPASS_FIXED] Erreur de traitement JSON: $e');
    }
  }
  
  /// D√©marre l'enregistrement
  Future<bool> startRecording() async {
    try {
      _logger.info('üé§ [V4_BYPASS_FIXED] ===== D√âBUT D√âMARRAGE ENREGISTREMENT V4 FIXED =====');
      
      if (!_isInitialized) {
        throw Exception('Adaptateur non initialis√©');
      }
      
      _logger.info('üé§ [V4_BYPASS_FIXED] D√©marrage de l\'enregistrement...');
      
      // Activer la r√©ception audio dans LiveKit
      _liveKitService.startAcceptingAudioData();
      
      // Publier l'audio
      await _liveKitService.publishMyAudio();
      
      // Envoyer le message de d√©marrage (converti en bytes)
      final message = '{"type": "audio_control", "event": "recording_started"}';
      await _liveKitService.sendData(Uint8List.fromList(message.codeUnits));
      
      _isRecording = true;
      _error = null;
      
      onRecordingStarted?.call();
      
      _logger.info('‚úÖ [V4_BYPASS_FIXED] Enregistrement d√©marr√© avec succ√®s');
      _logger.info('üé§ [V4_BYPASS_FIXED] ===== FIN D√âMARRAGE ENREGISTREMENT V4 FIXED =====');
      
      return true;
      
    } catch (e) {
      _error = 'Erreur de d√©marrage: $e';
      _logger.severe('‚ùå [V4_BYPASS_FIXED] $_error');
      onError?.call(_error!);
      return false;
    }
  }
  
  /// Arr√™te l'enregistrement
  Future<bool> stopRecording() async {
    try {
      _logger.info('üõë [V4_BYPASS_FIXED] Arr√™t de l\'enregistrement...');
      
      // D√©sactiver la r√©ception audio
      _liveKitService.stopAcceptingAudioData();
      
      // Arr√™ter la publication audio
      await _liveKitService.unpublishMyAudio();
      
      // Arr√™ter le lecteur
      _audioPlayer.stop();
      
      // Envoyer le message d'arr√™t (converti en bytes)
      final message = '{"type": "audio_control", "event": "recording_stopped"}';
      await _liveKitService.sendData(Uint8List.fromList(message.codeUnits));
      
      _isRecording = false;
      
      onRecordingStopped?.call();
      
      _logger.info('‚úÖ [V4_BYPASS_FIXED] Enregistrement arr√™t√© avec succ√®s');
      return true;
      
    } catch (e) {
      _error = 'Erreur d\'arr√™t: $e';
      _logger.severe('‚ùå [V4_BYPASS_FIXED] $_error');
      onError?.call(_error!);
      return false;
    }
  }
  
  /// Lib√®re les ressources
  Future<void> dispose() async {
    _logger.info('üßπ [V4_BYPASS_FIXED] Lib√©ration des ressources...');
    
    if (_isRecording) {
      await stopRecording();
    }
    
    await _audioPlayer.dispose();
    
    _isInitialized = false;
    _isConnected = false;
    
    _logger.info('‚úÖ [V4_BYPASS_FIXED] Ressources lib√©r√©es');
  }
  
  /// Retourne les statistiques
  Map<String, dynamic> getStats() {
    final playerStats = _audioPlayer.getStats();
    
    return {
      'isInitialized': _isInitialized,
      'isRecording': _isRecording,
      'isConnected': _isConnected,
      'error': _error,
      'totalChunksReceived': _totalChunksReceived,
      'totalChunksProcessed': _totalChunksProcessed,
      'totalChunksRejected': _totalChunksRejected,
      'lastDataTime': _lastDataTime?.toIso8601String(),
      'player': playerStats,
    };
  }
  
  // Getters pour compatibilit√©
  bool get isInitialized => _isInitialized;
  bool get isRecording => _isRecording;
  bool get isConnected => _isConnected;
  String? get error => _error;
}